# consul managed cluster scan examples
# The consul DNS https://www.consul.io/discovery.html is producing distint hostnames
# which typically are describing the service or service category hosted on the node
# naming convention is <node role>.node[.datacenter].<domain>
# where default 'domain' is simply 'consul' and the 'node role' is
# business-specific e.g. 'database-server'
# https://www.consul.io/docs/agent/dns.html
# therefore one can collect data e.g. about outliers running the past version of
# some package.
# The below examples are for case when the nodes are managed by Puppet
# and running a RHEL family OS

LEADER=$(hostname -f)
export PATH=$PATH:/usr/local/bin
export CONSUL_HTTP_SSL=true

PACKAGE='oracle-java8-jdk'
VERSION_MAJOR='1.8.0'
VERSION_BUILD='192'

consul exec -http-addr https://$LEADER:8543 \
rpm -q $PACKAGE \&\& hostname -f | grep -A 1 $VERSION_BUILD | grep -v $PACKAGE

# this command can run from any node that has consul service running, but best run from service discovery role and produces output in the format:
# [node_role]: $PACKAGE-$VERSION_MAJOR-$VERSION_BUILD

# alternative formatting:
# rpm -q $PACKAGE \&\& hostname -f | grep -A 1 $VERSION_MAJOR | grep -A 1 $VERSION_BUILD | grep -v $PACKAGE

PACKAGE='oracle-java8-jdk'
VERSION_MAJOR='1.8.0'
VERSION_BUILD='192'
consul exec -http-addr https://$LEADER:8543 \
rpm -q $PACKAGE \&\& hostname -f | grep -A 1 $VERSION_BUILD | grep -v $PACKAGE

# formatting of the command to find outliers, not running the $VERSION_BUILD

PACKAGE='oracle-java8-jdk'
VERSION_MAJOR='1.8.0'
VERSION_BUILD='192'
consul exec -http-addr https://$LEADER:8543 \
rpm -q $PACKAGE \&\& hostname -f | grep $VERSION_MAJOR |grep -v $VERSION_BUILD

# Produces the same listing but queries the version in as Puppet knows it

consul exec -http-addr https://$LEADER:8543 \
\( puppet resource package $PACKAGE \| grep -Po "'[0-9].+'" \) \&\& hostname -f | grep -A 1 $VERSION_MAJOR

# Alternatively one can pack the command into a string (only the dollar sign and double quote would need escaping):

consul exec -http-addr https://$LEADER:8543 "( puppet resource package $PACKAGE | grep -Po \"'[0-9].+'\" ) && hostname -f" | grep -A 1 $VERSION_MAJOR

# the following command checks puppet mcollective log $LOG to list the nodes
# reporting some specific error message $MESSAGE

LOG='/var/log/puppetlabs/mcollective.log'
MESSAGE="Received frame of type 'ERROR' expected 'MESSAGE'"
grep - "${MESSAGE}" $LOG \&\& hostname -f

# Alternative short command to make consul list the members of the cluster
consul members -http-addr https://$LEADER:8543

# when there is a change in the "configuration schema" that needs to be unoformly applied to the cluster members
# the jq prints a null to STDOUT when no matching expression is found

consul exec -http-addr https://$LEADER:8543 \
\(jq '.acl_ttl \< '/etc/consul.d/config.json' \| grep -q 'null' \) \&\& echo 'MARKER' | grep 'MARKER'

# Filter nodes by the presence of the data extracted throgh some JSON filter
# Collect node-specific DATA e.g. fqdn of the qualified node
# report aditional inventory to service discovery node
# For this to work everything needs to be printed on one line as MARKER ).
# Collecting extra data into a shell variable $DATA first:

consul exec -http-addr https://$LEADER:8543 \
\(jq '.ui' \< '/etc/consul.d/consul.json' \| grep -q 'null' \) \|\| \( DATA=\$\( hostname -f \); echo 'MARKER: ' \$DATA \) | grep 'MARKER'
# https://www.consul.io/docs/agent/options.html#disable_remote_exec

# this generates the filtered application node listing like:
# application-server-10: MARKER: host1.domain
# cache-server-10: MARKER: host2.domain
# NOTE: printf's % need escape to work via consul

consul exec -http-addr https://$LEADER:8543 \
\(jq '.missing_setting' \< '/etc/consul.d/consul.json' \| grep -q 'null' \) \&\& \( DATA=\$\( hostname -f \)\; /usr/bin/printf \"MARKER: \%s\" \$DATA \) | grep 'MARKER'
# will produce a report loke
# agent-one: MARKER: node1.consul.domain
# agent-two: MARKER: node2.consul.domain

# on a vanilla system consul exec listens to 8500 HTTP
MESSAGE='start on runlevel'
CONFIG_FILE='/etc/init/consul.conf'

consul exec -verbose \
\( grep -q \"$MESSAGE\" \"$CONFIG_FILE\" \) \&\& \( DATA=\$\( hostname -f \)\; /usr/bin/printf \"MARKER: \%s\" \$DATA \) | grep 'MARKER'

# guaranteed to find in a successful appication 'catalina.out':
LOG_MESSAGE1='Server Startup'
# for real life case, LOG_MESSAGE1 and LOG_MESSAGE2 would be different
LOG_MESSAGE2='Server Startup'
# Fatal exception message fragment indicating severe infrastructure problem on a particular node:
LOG_MESSAGE1='skew too great'
LOG_MESSAGE2='skew too great'
LOG_FILE='/opt/tomcat/logs/catalina.out'
# NOTE: test positive is always better in readability

consul exec -http-addr https://$LEADER:8543 \
\(grep \"\$LOG_MESSAGE1" $LOG_FILE \| grep -q \"\$LOG_MESSAGE2\" \) \&\& \( DATA=\$\( hostname -f \)\; /bin/printf \"MARKER: \%s\" \$DATA \) | grep 'MARKER'

# NOTE: for some reason using the puppet --version command fails here
FILTER_VERSION='5.5'; # accept that the "Build" field may vary - only care about major and minor release

consul exec -http-addr https://$LEADER:8543 \
\(PUPPET_VERSION=\$\(puppet \-V\)\; if echo \$PUPPET_VERSION \| grep "$FILTER_VERSION" \; then NODE_HOSTNAME=\$\( hostname -f \)\; /bin/printf \"NODE: \%s VERSION: \%s\" \$NODE_HOSTNAME \$PUPPET_VERSION \; fi \) | grep 'NODE'

FILTER_VERSION='5.5'; # accept that the "Build" field may vary - only care about major and minor release
consul exec -http-addr https://$LEADER:8543 \
\(PUPPET_VERSION=\$\(puppet \-V\)\; if echo \$PUPPET_VERSION \| grep "$FILTER_VERSION" \; then NODE_HOSTNAME=\$\( hostname -f \)\; RPM_INFO=\$\( rpm --qf '\%\{INSTALLTIME:date\} \%\{NAME\}-\%\{VERSION\}\%\{RELEASE\}.\%\{ARCH\}' -q puppet-agent \)\;/bin/printf \"NODE: \%s RPM INFO: \%s\" \$NODE_HOSTNAME \$RPM_INFO \; fi \) | grep 'NODE'

# NOTE: find specific logs in var/log/messages
# by name of the service and logged event.
# handy when one can no longer ssh to the destination for some reason
# and messages may help diagnose
# NOTE:  forsome reason grep -v with intent do exclude consul itself
# leads to misinpreted command, switched to filter by event instead of resolving

TARGET_NODE='app-node-0'
LOG_SERVICE='boks_sshd'
FILTER_EVENT='keyboard-interactive'

consul exec -http-addr https://$LEADER:8543 --node=$TARGET_NODE \
\( grep \'$LOG_SERVICE\\[\' /var/log/messages \| grep "$FILTER_EVENT" \)


# Collect package install date from rpm for the sake of evaluating outliers
PACKAGE_NAME='httpd'
RPM_DATA=$(rpm --qf '%{INSTALLTIME:date} %{NAME} %{VERSION}-%{RELEASE}-%{ARCH}' -q $PACKAGE_NAME)
echo $RPM_DATA
# Thu 17 Oct 2019 03:52:12 PM EDT httpd 2.4.6-90.el7.centos-x86_64

TARGET_NODE='app-node-0'
FILTER_VERSION='4.10'
PACKAGE_NAME='puppet-agent'
APP='puppet'

LEADER=$(hostname -f)
export PATH=$PATH:/usr/local/bin
export CONSUL_HTTP_SSL=true

consul exec -http-addr https://$LEADER:8543 --node=$TARGET_NODE \
\( APP_VERSION=\$\( $APP -version \)\; if echo \$APP_VERSION | grep "${FILTER_VERSION}" \; then NODE_HOSTNAME=\$\(hostname -f\) \; RPM_DATA=\$\(rpm --qf '\%\{INSTALLTIME:date\} \%\{NAME\} \%\{VERSION\}-\%\{RELEASE\}-\%\{ARCH\}' -q $PACKAGE_NAME\)\; /bin/printf \"\%s\\t\%s\" \$NODE_HOSTNAME \$RPM_DATA \; fi \) |grep "${PACKAGE_NAME}" | sort | tee /tmp/log.$$.txt

# standard Tomcat application
BOOTSTRAP_CLASS='org.apache.catalina.startup.Bootstrap'

# WSO2 jag container
BOOTSTRAP_CLASS='org.wso2.carbon.bootstrap.Bootstrap'
CLASS_MASK=$BOOTSTRAP_CLASS
# TODO: modify on the fly e.g.
# https://github.com/sergueik/puppetmaster_vagrant/blob/master/generic_service_check.sh
CLASS_MASK=$(echo $BOOTSTRAP_CLASS | sed 's|\([a-z0-9]\)$|[\1]|')
# CLASS_MASK='org.wso2.carbon.bootstrap.Bootstra[p]'
INDEXES='1 2 3'
NODE_BASENAME='tomcat_app'

for INDEX in $INDEXES ; do TARGET_NODE_NAME="${NODE_BASENAME}-${INDEX}"; \
consul exec -http-addr https://$LEADER:8543 --node=$TARGET_NODE_NAME \
"ps ax | grep '$CLASS_MASK' | grep -v grep  && echo 'Found'" \
; done | grep 'Found'
