# consul managed cluster scan examples
# The consul DNS https://www.consul.io/discovery.html is producing distint hostnames
# which typically are describing the service or service category hosted on the node
# naming convention is <node role>.node[.datacenter].<domain>
# where default 'domain' is simply 'consul' and the 'node role' is
# business-specific e.g. 'database-server'
# https://www.consul.io/docs/agent/dns.html
# therefore one can collect data e.g. about outliers running the past version of
# some package.
# The below examples are for case when the nodes are managed by Puppet
# and running a RHEL family OS


export LEADER=$(hostname -f)
PATH=$PATH:/usr/local/bin
export CONSUL_HTTP_SSL=true

export PACKAGE='oracle-java8-jdk'
export VERSION_MAJOR='1.8.0'
export VERSION_BUILD='192'
consul exec -http-addr https://$LEADER:8543 \
rpm -q $PACKAGE \&\& hostname -f | grep -A 1 $VERSION_BUILD | grep -v $PACKAGE

# this command can run from any node that has consul service running, but best run from service discovery role and produces output in the format:
# [node_role]: $PACKAGE-$VERSION_MAJOR-$VERSION_BUILD

# alternative formatting:
# rpm -q $PACKAGE \&\& hostname -f | grep -A 1 $VERSION_MAJOR | grep -A 1 $VERSION_BUILD | grep -v $PACKAGE

export PACKAGE='oracle-java8-jdk'
export VERSION_MAJOR='1.8.0'
export VERSION_BUILD='192'
consul exec -http-addr https://$LEADER:8543 \
rpm -q $PACKAGE \&\& hostname -f | grep -A 1 $VERSION_BUILD | grep -v $PACKAGE

# formatting of the command to find outliers, not running the $VERSION_BUILD

export PACKAGE='oracle-java8-jdk'
export VERSION_MAJOR='1.8.0'
export VERSION_BUILD='192'
consul exec -http-addr https://$LEADER:8543 \
rpm -q $PACKAGE \&\& hostname -f | grep $VERSION_MAJOR |grep -v $VERSION_BUILD

# Produces the same listing but queries the version in as Puppet knows it

consul exec -http-addr https://$LEADER:8543 \
\( puppet resource package $PACKAGE \| grep -Po "'[0-9].+'" \) \&\& hostname -f | grep -A 1 $VERSION_MAJOR


# Alternatively one can pack the command into a string (only the dollar sign and double quote would need escaping):

consul exec -http-addr https://$LEADER:8543 "( puppet resource package $PACKAGE | grep -Po \"'[0-9].+'\" ) && hostname -f" | grep -A 1 $VERSION_MAJOR

# the following command checks puppet mcollective log $LOG to list the nodes
# reporting some specific error message $MESSAGE

LOG='/var/log/puppetlabs/mcollective.log'
MESSAGE="Received frame of type 'ERROR' expected 'MESSAGE'"
grep - "${MESSAGE}" $LOG \&\& hostname -f


# Alternative short command to make consul list the members of the cluster
consul members -http-addr https://$LEADER:8543

# when there is a change in the "configuration schema" that needs to be unoformly applied to the cluster members
# the jq prints a null to STDOUT when no matching expression is found
consul exec -http-addr https://$LEADER:8543 \
\(jq '.acl_ttl \< '/etc/consul.d/config.json' \| grep -q 'null' \) \&\& echo 'MARKER' | grep 'MARKER'

# Filter nodes by the presence of the data extracted throgh some JSON filter
# Collect node-specific DATA e.g. fqdn of the qualified node
# report aditional inventory to service discovery node
# For this to work everything needs to be printed on one line as MARKER ).
# Collecting extra data into a shell variable $DATA first:
consul exec -http-addr https://$LEADER:8543 \
\(jq '.acl_ttl \< '/etc/consul.d/config.json' \| grep -q 'null' \) \|\| \( DATA=\$\( hostname -f \); echo 'MARKER: '\$DATA \) | grep 'MARKER'

# this generates the filtered application node listing like:
# application-server-10: MARKER: host1.domain
# cache-server-10: MARKER: host2.domain

# NOTE: printf's % need escape to work via consul
consul exec -http-addr https://$LEADER:8543 \
\(jq '.acl_ttl \< '/etc/consul.d/config.json' \| grep -q 'null' \) \|\| \( DATA=\$\( hostname -f \)\; /bin/printf \"MARKER: \%s\" \$DATA \) | grep 'MARKER'

